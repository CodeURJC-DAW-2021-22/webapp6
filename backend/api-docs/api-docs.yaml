openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8443
  description: Generated server url
paths:
  /api/users:
    get:
      tags:
      - user-rest-controller
      summary: Get all users
      operationId: getAllUsers
      parameters:
      - name: page
        in: query
        description: Page number of the list of users
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Found a page of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Mostrar'
    put:
      tags:
      - user-rest-controller
      summary: Update user
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_Mostrar'
        required: true
      responses:
        "200":
          description: User updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Mostrar'
        "401":
          description: unauthorized to update the user
    post:
      tags:
      - user-rest-controller
      summary: Register a new user
      operationId: registerNewUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: User registerd successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: User couldn't register
  /api/users/{id}:
    get:
      tags:
      - user-rest-controller
      summary: Get the user by ID
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Mostrar'
        "404":
          description: User not found
    put:
      tags:
      - user-rest-controller
      summary: Delete a user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "404":
          description: User wasn't found
        "200":
          description: User deleted succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/tournaments/{id}:
    get:
      tags:
      - tournament-rest-controller
      summary: Get tournament by id
      operationId: getTournament
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: got tournament successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        "404":
          description: tournament not found
    put:
      tags:
      - tournament-rest-controller
      summary: update tournamet
      operationId: updateTournament
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      responses:
        "401":
          description: you are not authorized to update the tournament
        "200":
          description: tournament updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        "400":
          description: couldn't get the tournament
        "404":
          description: tournament not found
    delete:
      tags:
      - tournament-rest-controller
      summary: Delete tournament
      operationId: deleteTournament
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: tournamente deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        "401":
          description: you are not authorized to delete the tournament
        "404":
          description: tournament not found
  /api/tournaments/{id}/teams:
    get:
      tags:
      - tournament-rest-controller
      summary: Get teams from tournament
      operationId: getTournamentTeams
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: success getting the teams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament_Mostrar'
        "404":
          description: tournament not found
    put:
      tags:
      - tournament-rest-controller
      summary: show tournament's teams
      operationId: tournamentTeams
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_Mostrar'
        required: true
      responses:
        "400":
          description: couldn't get the teams
        "200":
          description: teams posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament_Mostrar'
        "404":
          description: tournament not found
        "401":
          description: you are not authorized to see the teams
  /api/matches/{id}/result:
    put:
      tags:
      - match-rest-controller
      summary: set Match's result
      operationId: resultMatch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
        required: true
      responses:
        "200":
          description: Resultd updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        "404":
          description: Couldn't find the match
        "400":
          description: Couldn't update the result
        "401":
          description: You don't have permission to update the result
  /api/users/image:
    post:
      tags:
      - user-rest-controller
      summary: upload user image
      operationId: uploadImage
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "404":
          description: You are not authorized to upload the image
        "200":
          description: uploaded correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
      - user-rest-controller
      summary: Delete user image
      operationId: deleteImage
      responses:
        "400":
          description: Request cannot be processed
        "200":
          description: Imaged deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: You are not authorized to delete the image
  /api/tournaments:
    get:
      tags:
      - tournament-rest-controller
      summary: get all tournaments
      operationId: getTournaments
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success getting the tournaments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
    post:
      tags:
      - tournament-rest-controller
      summary: Create tournament
      operationId: createTournament
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      responses:
        "200":
          description: success creating the tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        "401":
          description: you cannot create a tournament
  /api/tournaments/{id}/image:
    get:
      tags:
      - tournament-rest-controller
      summary: download tournament image
      operationId: downloadImage_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: there's no image
        "200":
          description: downloaded correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        "401":
          description: You are not authorized to download the image
        "404":
          description: tournament not found
    post:
      tags:
      - tournament-rest-controller
      summary: upload tournament image
      operationId: uploadImage_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "401":
          description: You are not authorized to upload the image
        "200":
          description: uploaded correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        "404":
          description: tournament not found
    delete:
      tags:
      - tournament-rest-controller
      summary: delete tournament image
      operationId: deleteImage_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: couldn't get to the image
        "200":
          description: deleted correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        "401":
          description: You are not authorized to delete the image
        "404":
          description: tournament not found
  /api/auth/refresh:
    post:
      tags:
      - login-rest-controller
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/logout:
    post:
      tags:
      - login-rest-controller
      operationId: logOut
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
      - login-rest-controller
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/users/{id}/image:
    get:
      tags:
      - user-rest-controller
      summary: Download user image
      operationId: downloadImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Image not found
        "200":
          description: Imaged downloaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "204":
          description: Image field is empty
  /api/users/me:
    get:
      tags:
      - user-rest-controller
      summary: Get the user conected
      operationId: getActiveUser
      responses:
        "404":
          description: User conected not found
        "200":
          description: Found the connected user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Mostrar'
  /api/users/me/tournaments:
    get:
      tags:
      - user-rest-controller
      summary: Get the tournaments where the user is inscribed
      operationId: getUserTournaments
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Tournament not found
        "200":
          description: Found the tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/me/pairs:
    get:
      tags:
      - user-rest-controller
      summary: Get the user pairs
      operationId: getUserPairs
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Pairs founded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Mostrar'
        "404":
          description: Pairs weren't found
  /api/users/me/matches:
    get:
      tags:
      - user-rest-controller
      summary: Get the user's matches
      operationId: getUserMatches
      responses:
        "200":
          description: Match found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Mostrar'
        "404":
          description: Match not found
  /api/tournaments/{id}/matches:
    get:
      tags:
      - tournament-rest-controller
      summary: Get rounds from tournament
      operationId: getRound
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: round
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "201":
          description: the tournament doesn't have rounds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament_Mostrar'
        "200":
          description: success getting the rounds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament_Mostrar'
        "404":
          description: tournament not found
  /api/matches/{id}:
    get:
      tags:
      - match-rest-controller
      summary: Get the match by ID
      operationId: getMatch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Match not found
        "200":
          description: Found the mathch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match_Mostrar'
  /api/tournaments/{id}/teams/{teamid}:
    delete:
      tags:
      - tournament-rest-controller
      summary: delete team
      operationId: deleteTournamentTeam
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: teamid
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: team deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        "401":
          description: you are not authorized to deelte the team
        "404":
          description: tournament not found
components:
  schemas:
    User_Mostrar:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        realName:
          type: string
        location:
          type: string
        country:
          type: string
        phone:
          type: string
        numWins:
          type: integer
          format: int32
        numLoses:
          type: integer
          format: int32
        numMatchesPlayed:
          type: number
          format: double
        historicalKarma:
          type: array
          items:
            type: integer
            format: int32
        status:
          type: boolean
        encodedPassword:
          type: string
        roles:
          type: array
          items:
            type: string
        karma:
          type: integer
          format: int32
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        realName:
          type: string
        location:
          type: string
        country:
          type: string
        phone:
          type: string
        numWins:
          type: integer
          format: int32
        numLoses:
          type: integer
          format: int32
        numMatchesPlayed:
          type: number
          format: double
        historicalKarma:
          type: array
          items:
            type: integer
            format: int32
        status:
          type: boolean
        encodedPassword:
          type: string
        roles:
          type: array
          items:
            type: string
        karma:
          type: integer
          format: int32
    Tournament:
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          type: string
        tournamentName:
          type: string
        numParticipants:
          type: integer
          format: int32
        numSignedUp:
          type: integer
          format: int32
        rounds:
          type: integer
          format: int32
        about:
          type: string
        ruleset:
          type: string
        location:
          type: string
        inscriptionDate:
          type: string
        startDate:
          type: string
        started:
          type: boolean
    Tournament_Mostrar:
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          type: string
        tournamentName:
          type: string
        numParticipants:
          type: integer
          format: int32
        numSignedUp:
          type: integer
          format: int32
        rounds:
          type: integer
          format: int32
        about:
          type: string
        ruleset:
          type: string
        location:
          type: string
        inscriptionDate:
          type: string
        startDate:
          type: string
        started:
          type: boolean
    Match:
      type: object
      properties:
        id:
          type: integer
          format: int64
        round:
          type: integer
          format: int32
        result:
          type: array
          items:
            type: integer
            format: int32
        setsTeamOne:
          type: integer
          format: int32
        setsTeamTwo:
          type: integer
          format: int32
        hasWinner:
          type: boolean
        winnerTeamOne:
          type: boolean
        winnerTeamTwo:
          type: boolean
        teamOne:
          $ref: '#/components/schemas/Team'
        teamTwo:
          $ref: '#/components/schemas/Team'
        tournament:
          $ref: '#/components/schemas/Tournament'
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tbd:
          type: boolean
        userA:
          $ref: '#/components/schemas/User'
        userB:
          $ref: '#/components/schemas/User'
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Match_Mostrar:
      type: object
      properties:
        id:
          type: integer
          format: int64
        round:
          type: integer
          format: int32
        result:
          type: array
          items:
            type: integer
            format: int32
        setsTeamOne:
          type: integer
          format: int32
        setsTeamTwo:
          type: integer
          format: int32
        hasWinner:
          type: boolean
        winnerTeamOne:
          type: boolean
        winnerTeamTwo:
          type: boolean
        teamOne:
          $ref: '#/components/schemas/Team_Mostrar'
        teamTwo:
          $ref: '#/components/schemas/Team_Mostrar'
        tournament:
          $ref: '#/components/schemas/Tournament_Mostrar'
    Team_Mostrar:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tbd:
          type: boolean
        userA:
          $ref: '#/components/schemas/User_Mostrar'
        userB:
          $ref: '#/components/schemas/User_Mostrar'
